(define *nodes* '((node1 "First node description.")
                  (node2 "Second node description.")
                  (node3 "Third node description.")))

(define *edges* '((node1 (node2 "asdf") (node3 "qwer"))
                  (node2 (node3 "asdfasdfsd"))
                  (node3 (node1 "zxcv"))))

(define (dot-name name)
  (list->string (map (lambda (c)
                       (if (not (or (char-alphabetic? c) (char-numeric? c)))
                           #\_
                           c))
                     (string->list (symbol->string name)))))

(define *max-label-length* 30)

(define (dot-label label)
  (if (> (string-length label) *max-label-length*)
      (string-append (substring label 0 *max-label-length*) "...")
      label))

(define (write-string str port)
  (for-each (lambda (c) (write-char c port)) (string->list str)))

(define (nodes->dot nodes port)
  (for-each (lambda (node)
              (write-string (dot-name (car node)) port)
              (write-string "[label=\"" port)
              (write-string (dot-label (cadr node)) port)
              (write-string "\"];" port)
              (newline port))
            nodes))

(define (edges->dot edges port)
  (for-each (lambda (node)
              (for-each (lambda (edge)
                          (write-string (dot-name (car node)) port)
                          (write-string "->" port)
                          (write-string (dot-name (car edge)) port)
                          (write-string "[label=\"" port)
                          (write-string (dot-label (cadr edge)) port)
                          (write-string "\"];" port)
                          (newline port))
                        (cdr node)))
            edges))

(define (graph->dot nodes edges . p)
  (let ((port (if (null? p) (current-output-port) p)))
    (write-string "digraph{" port)
    (newline port)
    (nodes->dot nodes port)
    (edges->dot edges port)
    (write-string "}" port)
    (newline port)))

(graph->dot *nodes* *edges*)
